(mu:eq 1 1)
(mu:eval 'mu:std-in)
(mu:eval ())
(mu:fix (:lambda (l) (:if l ((:lambda () (mu:cdr l))) ())) '(1 2 3 4))
(mu:apply mu:eq '(1 2))
(mu:apply mu:fx-add '(1 2))
(mu:type-of #\a)
(mu:type-of '(1 2 3))
(mu:type-of 'mu:apply)
(mu:type-of ())
(mu:type-of 1)
(mu:type-of :typeof)
(mu:type-of mu:std-in)
(mu:view #\a)
(mu:view '(1 2))
(mu:view 1234)
(mu:view 1.0)
(mu:view #(:t 1 2))
(mu:view #s(:foo 1 2))
(mu:view 'a)
(mu:view 'mu:eq)
(mu:view mu:std-in)
(mu:with-ex (:lambda (cond obj) cond) (:lambda () (mu:fx-div 1 1)))
