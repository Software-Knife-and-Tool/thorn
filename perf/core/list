#
# core list tests
#
perf "(mu:type-of core:reverse)"
perf "(core:append '(() ()))"
perf "(core:append '(() (1 2 3)))"
perf "(core:append '((1 2 3) (4 5 6)))"
perf "(core:append '((1 2) 3))"
perf "(core:dropl '(1 2 3) 1)"
perf "(core:dropr '(1 2 3) 1)"
perf "(core:findl core:symbolp '(1 2 3))"
perf "(core:findl core:symbolp '(a b c))"
perf "(core:findr core:symbolp '(1 2 3))"
perf "(core:findr core:symbolp '(a b c))"
perf "(core:foldl (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(1 2 3))"
perf "(core:foldl (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(a b c))"
perf "(core:foldl (:lambda (el acc) (mu:cons el acc)) () '(1 2 3 4))"
perf "(core:foldl (:lambda (el acc) (mu:cons el acc)) () '(1))"
perf "(core:foldl (:lambda (el acc) (mu:cons el acc)) () ())"
perf "(core:foldl (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))"
perf "(core:foldr (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(1 2 3))"
perf "(core:foldr (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(a b c))"
perf "(core:foldr (:lambda (el acc) (mu:cons el acc)) () '(1 2 3 4))"
perf "(core:foldr (:lambda (el acc) (mu:cons el acc)) () '(1))"
perf "(core:foldr (:lambda (el acc) (mu:cons el acc)) () ())"
perf "(core:foldr (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))"
perf "(core:last '(1 2 3))"
perf "(core:mapc (:lambda (el) el) '(1 2 3))"
perf "(core:mapc (:lambda (el) el) ())"
perf "(core:mapcar (:lambda (el) el) '(1 2 3))"
perf "(core:mapcar (:lambda (el) el) ())"
perf "(core:mapl (:lambda (el) el) '(1 2 3))"
perf "(core:mapl (:lambda (el) el) ())"
perf "(core:maplist (:lambda (el) el) '(1 2 3))"
perf "(core:maplist (:lambda (el) el) ())"
perf "(core:positionl (:lambda (el) (mu:eq el 'foo)) '(foo))"
perf "(core:positionl (:lambda (el) (mu:eq el 'foo)) '(1 foo))"
perf "(core:positionl core:zerop '(0 2 0 4 5))"
perf "(core:positionl core:zerop '(1 2 3 4 0))"
perf "(core:positionr (:lambda (el) (mu:eq el 'foo)) '(foo))"
perf "(core:positionr (:lambda (el) (mu:eq el 'foo)) '(1 foo))"
perf "(core:positionr core:zerop '(0 1 2 3 4))"
perf "(core:positionr core:zerop '(2 3 4 5 0))"
perf "(core:reverse '(1 2 3 4))"
perf "(mu:cdr (core:assoc #\\a '((#\\a . foo))))"
perf "(mu:cdr (core:assoc #\\a '(() (#\\a . foo))))"
