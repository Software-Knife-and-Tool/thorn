(mu:type-of core:reverse)
(core:append '(() ()))
(core:append '(() (1 2 3)))
(core:append '((1 2 3) (4 5 6)))
(core:append '((1 2) 3))
(core:dropl '(1 2 3) 1)
(core:dropr '(1 2 3) 1)
(core:findl core:symbolp '(1 2 3))
(core:findl core:symbolp '(a b c))
(core:findr core:symbolp '(1 2 3))
(core:findr core:symbolp '(a b c))
(core:foldl (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(1 2 3))
(core:foldl (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(a b c))
(core:foldl (:lambda (el acc) (mu:cons el acc)) () '(1 2 3 4))
(core:foldl (:lambda (el acc) (mu:cons el acc)) () '(1))
(core:foldl (:lambda (el acc) (mu:cons el acc)) () ())
(core:foldl (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))
(core:foldr (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(1 2 3))
(core:foldr (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(a b c))
(core:foldr (:lambda (el acc) (mu:cons el acc)) () '(1 2 3 4))
(core:foldr (:lambda (el acc) (mu:cons el acc)) () '(1))
(core:foldr (:lambda (el acc) (mu:cons el acc)) () ())
(core:foldr (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))
(core:last '(1 2 3))
(core:mapc (:lambda (el) el) '(1 2 3))
(core:mapc (:lambda (el) el) ())
(core:mapcar (:lambda (el) el) '(1 2 3))
(core:mapcar (:lambda (el) el) ())
(core:mapl (:lambda (el) el) '(1 2 3))
(core:mapl (:lambda (el) el) ())
(core:maplist (:lambda (el) el) '(1 2 3))
(core:maplist (:lambda (el) el) ())
(core:positionl (:lambda (el) (mu:eq el 'foo)) '(foo))
(core:positionl (:lambda (el) (mu:eq el 'foo)) '(1 foo))
(core:positionl core:zerop '(0 2 0 4 5))
(core:positionl core:zerop '(1 2 3 4 0))
(core:positionr (:lambda (el) (mu:eq el 'foo)) '(foo))
(core:positionr (:lambda (el) (mu:eq el 'foo)) '(1 foo))
(core:positionr core:zerop '(0 1 2 3 4))
(core:positionr core:zerop '(2 3 4 5 0))
(core:reverse '(1 2 3 4))
(mu:cdr (core:assoc #\a '((#\a . foo))))
(mu:cdr (core:assoc #\a '(() (#\a . foo))))
