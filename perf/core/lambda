#
# core lambda tests
#
perf "(mu:apply (core:compile '(lambda () 1)) ())"
perf "(mu:apply (core:compile '(lambda (a b) (core:null b))) '(1 2))"
perf "(mu:apply (core:compile '(lambda (a b) (mu:fx-add 1 2))) '(1 2))"
perf "(mu:apply (core:compile '(lambda (a b) (mu:fx-add a b))) '(1 2))"
perf "(mu:apply (core:compile '(lambda (a b) (mu:type-of b))) '(1 2))"
perf "(core:apply (core:compile '(lambda (a) a)) '(1))"
perf "(core:apply (core:compile '(lambda (a b) 1)) '(2 3))"
perf "(core:apply (core:compile '(lambda (a b) (core:fixnump b))) '(1 2))"
perf "(core:apply (core:compile '(lambda (a b) (mu:fx-add a b))) '(1 2))"
perf "(core:apply (core:compile '(lambda (&rest e) e)) '(1 2 3 4 5))"
perf "(core:apply (core:compile '(lambda (a &rest e) e)) '(1 2 3 4 5))"
perf "(core:apply (core:compile '(lambda (a b &rest e) e)) '(1 2 3 4 5))"
perf "(core:apply (core:compile '(lambda (a b c &rest e) e)) '(1 2 3 4 5))"
perf "(core:apply (core:compile '(lambda (a b c d &rest e) e)) '(1 2 3 4 5))"
perf "(core:apply (core:compile '(lambda (a b c d e &rest f) f)) '(1 2 3 4 5))"
perf "(mu:type-of (core:apply (core:compile '(lambda (a) (a))) (mu:cons (:lambda () 1) ())))"
perf "(mu:eval (core:compile '((lambda (a &rest b) (a b)) mu:car 1 2 3)))"
perf "(mu:eval (core:compile '((lambda (a &rest b) (a b)) mu:car (mu:fx-add 2 1) 2 1)))"
