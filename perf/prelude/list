(mu:type-of prelude:reverse)
(prelude:append '(() ()))
(prelude:append '(() (1 2 3)))
(prelude:append '((1 2 3) (4 5 6)))
(prelude:append '((1 2) 3))
(prelude:dropl '(1 2 3) 1)
(prelude:dropr '(1 2 3) 1)
(prelude:findl prelude:symbolp '(1 2 3))
(prelude:findl prelude:symbolp '(a b c))
(prelude:findr prelude:symbolp '(1 2 3))
(prelude:findr prelude:symbolp '(a b c))
(prelude:foldl (:lambda (el acc) (:if (prelude:null acc) :nil (prelude:symbolp el))) :t '(1 2 3))
(prelude:foldl (:lambda (el acc) (:if (prelude:null acc) :nil (prelude:symbolp el))) :t '(a b c))
(prelude:foldl (:lambda (el acc) (mu:cons el acc)) () '(1 2 3 4))
(prelude:foldl (:lambda (el acc) (mu:cons el acc)) () '(1))
(prelude:foldl (:lambda (el acc) (mu:cons el acc)) () ())
(prelude:foldl (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))
(prelude:foldr (:lambda (el acc) (:if (prelude:null acc) :nil (prelude:symbolp el))) :t '(1 2 3))
(prelude:foldr (:lambda (el acc) (:if (prelude:null acc) :nil (prelude:symbolp el))) :t '(a b c))
(prelude:foldr (:lambda (el acc) (mu:cons el acc)) () '(1 2 3 4))
(prelude:foldr (:lambda (el acc) (mu:cons el acc)) () '(1))
(prelude:foldr (:lambda (el acc) (mu:cons el acc)) () ())
(prelude:foldr (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))
(prelude:last '(1 2 3))
(prelude:mapc (:lambda (el) el) '(1 2 3))
(prelude:mapc (:lambda (el) el) ())
(prelude:mapcar (:lambda (el) el) '(1 2 3))
(prelude:mapcar (:lambda (el) el) ())
(prelude:mapl (:lambda (el) el) '(1 2 3))
(prelude:mapl (:lambda (el) el) ())
(prelude:maplist (:lambda (el) el) '(1 2 3))
(prelude:maplist (:lambda (el) el) ())
(prelude:positionl (:lambda (el) (mu:eq el 'foo)) '(foo))
(prelude:positionl (:lambda (el) (mu:eq el 'foo)) '(1 foo))
(prelude:positionl prelude:zerop '(0 2 0 4 5))
(prelude:positionl prelude:zerop '(1 2 3 4 0))
(prelude:positionr (:lambda (el) (mu:eq el 'foo)) '(foo))
(prelude:positionr (:lambda (el) (mu:eq el 'foo)) '(1 foo))
(prelude:positionr prelude:zerop '(0 1 2 3 4))
(prelude:positionr prelude:zerop '(2 3 4 5 0))
(prelude:reverse '(1 2 3 4))
(mu:cdr (prelude:assoc #\a '((#\a . foo))))
(mu:cdr (prelude:assoc #\a '(() (#\a . foo))))
