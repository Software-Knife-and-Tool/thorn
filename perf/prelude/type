(prelude:typep '(1 2) :cons)
(prelude:typep 1 :fixnum)
(prelude:typep (mu:struct :struct ()) :struct)
(prelude:typep "abc" :vector)
(prelude:typep #(:t 1 2 3) :vector)
(prelude:typep mu:std-in :stream)
(prelude:typep #\a :char)
(prelude:typep 1.024e23 :float)
(prelude:typep (mu:map ()) :map)
(prelude:typep :foo :keyword)
(prelude:typep 'foo :symbol)
(prelude:typep () :null)
(prelude:typep () 'symbol)
(prelude:typep () '(satisfies prelude:null))
(prelude:typep 1 '(satisfies prelude:fixnump))
(prelude:typep 1024e23 '(satisfies prelude:floatp))
(prelude:typep '(1 2 3) '(satisfies prelude:consp))
(prelude:typep #(:t 1 2 3) '(satisfies prelude:vectorp))
(prelude:typep #\a '(satisfies prelude:charp))
(prelude:typep () '(not symbol))
(prelude:typep () '(and))
(prelude:typep () '(and (satisfies prelude:null)))
(prelude:typep () '(and :null (satisfies prelude:null)))
(prelude:typep () '(or))
(prelude:typep () '(or (satisfies prelude:null)))
(prelude:typep () '(or :null (satisfies prelude:null)))
