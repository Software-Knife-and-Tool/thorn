(mu:apply (prelude:compile '(lambda () 1)) ())
(mu:apply (prelude:compile '(lambda (a b) (prelude:null b))) '(1 2))
(mu:apply (prelude:compile '(lambda (a b) (mu:fx-add 1 2))) '(1 2))
(mu:apply (prelude:compile '(lambda (a b) (mu:fx-add a b))) '(1 2))
(mu:apply (prelude:compile '(lambda (a b) (mu:type-of b))) '(1 2))
(prelude:apply (prelude:compile '(lambda (a) a)) '(1))
(prelude:apply (prelude:compile '(lambda (a b) 1)) '(2 3))
(prelude:apply (prelude:compile '(lambda (a b) (prelude:fixnump b))) '(1 2))
(prelude:apply (prelude:compile '(lambda (a b) (mu:fx-add a b))) '(1 2))
(prelude:apply (prelude:compile '(lambda (&rest e) e)) '(1 2 3 4 5))
(prelude:apply (prelude:compile '(lambda (a &rest e) e)) '(1 2 3 4 5))
(prelude:apply (prelude:compile '(lambda (a b &rest e) e)) '(1 2 3 4 5))
(prelude:apply (prelude:compile '(lambda (a b c &rest e) e)) '(1 2 3 4 5))
(prelude:apply (prelude:compile '(lambda (a b c d &rest e) e)) '(1 2 3 4 5))
(prelude:apply (prelude:compile '(lambda (a b c d e &rest f) f)) '(1 2 3 4 5))
(mu:type-of (prelude:apply (prelude:compile '(lambda (a) (a))) (mu:cons (:lambda () 1) ())))
(mu:eval (prelude:compile '((lambda (a &rest b) (a b)) mu:car 1 2 3)))
(mu:eval (prelude:compile '((lambda (a &rest b) (a b)) mu:car (mu:fx-add 2 1) 2 1)))
