(mu:eq 1 1)	:t
(mu:eq 1 2)	:nil
(mu:eval 'mu:std-in)	#<stream: id: 2147483648>
(mu:eval ())	:nil
(mu:fix (:lambda (l) (:if l ((:lambda () (mu:write (mu:car l) () mu:std-out) (mu:cdr l))) ())) '(1 2 3 4))	1234:nil
(mu:fix (:lambda (l) (:if l ((:lambda () (mu:write (mu:car (mu:car l)) () mu:std-out) (mu:cdr l))) ())) '((0 . 1) (2 . 3)))	02:nil
(mu:apply mu:eq '(1 2))	:nil
(mu:apply mu:fx-add '(1 2))	3
(mu:type-of (mu:real-tm))	:fixnum
(mu:type-of (mu:run-us))	:fixnum
(mu:type-of #\a)	:char
(mu:type-of '(1 2 3))	:cons
(mu:type-of '(:lambda ()))	:cons
(mu:type-of 'mu:apply)	:symbol
(mu:type-of ())	:null
(mu:type-of 1)	:fixnum
(mu:type-of :typeof)	:keyword
(mu:type-of mu:std-in)	:stream
(mu:type-of mu:hp-info)	:func
(mu:type-of "type-of")	:vector
(mu:view ())	#(:t :nil nil :nil)
(mu:view :keyword)	#(:t :keyword keyword :keyword)
(mu:view #\a)	#(:t a)
(mu:view "abcdefg")	#(:t 7 :char)
(mu:view "abcdefgh")	#(:t 8 :char)
(mu:view '(1 2))	#(:t 1 (2))
(mu:view 1234)	#(:t 1234)
(mu:view 1.0)	#(:t 1.0000)
(mu:view #(:t 1 2))	#(:t 2 :t)
(mu:view #s(:foo 1 2))	#(:t :foo #(:t 1 2))
(mu:view 'a)	#(:t :nil a :UNBOUND)
(mu:view 'mu:eq)	#(:t :mu eq #<:function mu: [req:2, tag:0]>)
(mu:view mu:eq)	#(:t 2 0)
(mu:view mu:std-in)	#(:t 2147483648 :input :nil :nil)
(mu:view (mu:make-mp '((1 . 2))))	#(:t 0 ((1 . 2)))
(mu:hp-size ())	8
(mu:hp-size :keyword)	8
(mu:hp-size #\a)	8
(mu:hp-size '(1 2))	8
(mu:hp-size 1234)	8
(mu:hp-size 1.0)	8
(mu:hp-size #s(:foo 1 2))	52
(mu:hp-size "abcdefg")	8
(mu:hp-size "abcdefgh")	26
(mu:hp-size #(:t 1 2))	34
(mu:hp-size 'a)	27
(mu:hp-size 'mu:eq)	45
(mu:hp-size mu:eq)	18
(mu:hp-size mu:std-in)	36
(mu:with-ex (:lambda (cond obj) (mu:write cond () mu:std-out)) (:lambda () (mu:fx-div 1 1)))	1
(mu:repr :t (mu:repr () :t))	:t
