((:lambda (fn)(mu:funcall (:lambda (fn) (mu:eq :func (mu:type-of fn))) (mu:cons fn ()))) mu:eq)	:t
(mu:funcall (mu:compile '(:lambda (a) ((:lambda (a) (mu:fx-add a a)) (mu:fx-add a 2)))) '(1))	6
(mu:funcall (mu:compile '(:lambda (a) ((:lambda (b) (mu:fx-add a b)) (mu:fx-add a 2)))) '(1))	4
(mu:funcall (mu:compile '(:lambda (a) (mu:fx-add a a))) '(1))	2
(mu:compile #\a)	#\a
(mu:compile 1)	1
(mu:compile :compile)	:compile
(mu:compile "compile")	"compile"
