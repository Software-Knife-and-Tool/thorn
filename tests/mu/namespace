# mu namespace tests
assert_eq "(mu:eq :func (mu:type-of mu:make-ns))" ":t"
assert_eq '(mu:intern (mu:map-ns "mu") :extern "foo" "foo")' "mu:foo"
assert_eq '(mu:boundp (mu:intern (mu:map-ns "mu") :extern "foo" ()))' "mu:foo"
assert_eq '(mu:untern (mu:map-ns "mu") :extern "foo")' "mu:foo"
assert_eq '(mu:boundp (mu:untern (mu:map-ns "mu") :extern "foo"))' ":nil"
assert_eq '(mu:make-ns "core" (mu:map-ns "mu"))' '#<namespace: "core">'
assert_eq '(mu:map-ns "mu")' '#<namespace: "mu">'
assert_eq '(mu:map-ns "notfound")' ':nil'
assert_eq '(mu:map-ns (mu:ns-name (mu:make-ns "core" (mu:map-ns "mu"))))' '#<namespace: "core">'
assert_eq '(mu:ns-imp (mu:make-ns "core" (mu:map-ns "mu")))' '#<namespace: "mu">'
assert_eq '(mu:ns-imp (mu:map-ns "mu"))' ":nil"
assert_eq '(mu:ns-find (mu:map-ns "mu") :extern "eq")' "mu:eq"
assert_eq '(mu:ns-find (mu:map-ns "mu") :extern "foo")' ":nil"
assert_eq '(mu:ns-name (mu:map-ns "mu"))' '"mu"'
assert_eq '(mu:type-of (mu:ns-ext (mu:map-ns "mu")))' ':cons'
assert_eq '(mu:type-of (mu:ns-int (mu:map-ns "mu")))' ':cons'
