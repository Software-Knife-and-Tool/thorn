assert_eq '(mu:sv-len "abcde")' "5"
assert_eq '(mu:sv-len "abcdeghi")' "8"
assert_eq '(mu:sv-len "abcdegh")' "7"
assert_eq '(mu:sv-ref "abcde" 2)' "#\c"
assert_eq '(mu:sv-type "abcde")' ":char"
assert_eq '(mu:sv-len #(:t 1 a -3))' "3"
assert_eq '(mu:sv-ref #(:t 1 a -3) 1)' "a"
assert_eq '(mu:sv-type #(:byte 1 2 3))' ":byte"
assert_eq '(mu:sv-len #(:byte 1 2 3))' "3"
assert_eq '(mu:sv-ref #(:byte 1 2 3) 1)' "2"
assert_eq '(mu:sv-type #(:char #\1 #\2 #\3))' ":char"
assert_eq '(mu:sv-len #(:char #\1 #\2 #\3))' "3"
assert_eq '(mu:sv-ref #(:char #\1 #\2 #\3) 1)' "#\2"
assert_eq '(mu:sv-len #(:fixnum 1 2 -3))' "3"
assert_eq '(mu:sv-ref #(:fixnum 1 2 -3) 1)' "2"
assert_eq '(mu:sv-type #(:fixnum 1 2 -3))' ":fixnum"
assert_eq '(mu:sv-len #(:float 1.0 2.0 -3.0))' "3"
assert_eq '(mu:sv-ref #(:float 1.0 2.0 -3.0) 1)' "2.0000"
assert_eq '(mu:sv-type #(:float 1.0 2.0 -3.0))' ":float"
assert_eq "(mu:make-sv :byte '(1 2 3))" "#(:byte 1 2 3)"
assert_eq "(mu:make-sv :t '(1 2 3))" "#(:t 1 2 3)"
assert_eq "(mu:make-sv :fixnum '(1 2 3))" "#(:fixnum 1 2 3)"
assert_eq "(mu:make-sv :float '(1.0 2.0 -3.0))" "#(:float 1.0000 2.0000 -3.0000)"
