#
# core stream tests"
#
assert_eq "(mu:type-of core::read-stream-designator)" ":func"
assert_eq "(mu:type-of core::write-stream-designator)" ":func"
assert_eq "(mu:type-of core:close)" ":func"
assert_eq "(mu:type-of core:eof)" ":func"
assert_eq "(mu:type-of core:get-output-stream-string)" ":func"
assert_eq "(mu:type-of core:make-string-stream)" ":func"
assert_eq "(mu:type-of core:open)" ":func"
assert_eq "(mu:type-of core:read)" ":func"
assert_eq "(mu:type-of core:read-byte)" ":func"
assert_eq "(mu:type-of core:read-char)" ":func"
assert_eq "(mu:type-of core:terpri)" ":func"
assert_eq "(mu:type-of core:unread-char)" ":func"
assert_eq "(mu:type-of core:write)" ":func"
assert_eq "(mu:type-of core:write-byte)" ":func"
assert_eq "(mu:write 1 () mu:std-out)" "11"
assert_eq "(mu:write (mu:fx-add 1 2) () mu:std-out)" "33"
assert_eq "(mu:write (core:string= \"\" \"\") () mu:std-out)" ":t:t"
assert_eq "(mu:write (core:string= \"\" \"1\") () mu:std-out)" ":nil:nil"
assert_eq "(mu:write (core:string= \"1\" \"1\") () mu:std-out)" ":t:t"
assert_eq "(mu:write (core:string= \"123\" \"1\") () mu:std-out)" ":nil:nil"
assert_eq "(mu:write (core:string= \"\" \"ci\") () mu:std-out)" ":nil:nil"
assert_eq "(mu:write (core:string= \"ci\" \"\") () mu:std-out)" ":nil:nil"
#