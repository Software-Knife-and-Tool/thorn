(mu:type-of core:append)	:func
(mu:type-of core:assoc)	:func
(mu:type-of core:dropl)	:func
(mu:type-of core:dropr)	:func
(mu:type-of core:findl)	:func
(mu:type-of core:findr)	:func
(mu:type-of core:fix)	:func
(mu:type-of core:foldl)	:func
(mu:type-of core:foldr)	:func
(mu:type-of core:last)	:func
(mu:type-of core:length)	:func
(mu:type-of core:mapc)	:func
(mu:type-of core:mapcar)	:func
(mu:type-of core:mapl)	:func
(mu:type-of core:maplist)	:func
(mu:type-of core:positionl)	:func
(mu:type-of core:positionr)	:func
(mu:type-of core:reverse)	:func
(core:append '(() ()))	:nil
(core:append '(() (1 2 3)))	(1 2 3)
(core:append '((1 2 3) ()))	(1 2 3)
(core:append '((1 2 3) (4 5 6)))	(1 2 3 4 5 6)
(core:append '((1 2) 3))	(1 2 . 3)
(core:dropl '(1 2 3) 0)	(1 2 3)
(core:dropl '(1 2 3) 1)	(2 3)
(core:dropr '(1 2 3) 0)	(1 2 3)
(core:dropr '(1 2 3) 1)	(1 2)
(core:findr core:symbolp '(1 2 3))	:nil
(core:findr core:symbolp '(a b c))	a
(core:findl core:symbolp '(1 2 3))	:nil
(core:findl core:symbolp '(a b c))	c
(core:foldl (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(1 2 3))	:nil
(core:foldl (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(a b c))	:t
(core:foldl (:lambda (el acc) (mu:cons el acc)) () '(1 2 3 4))	(4 3 2 1)
(core:foldl (:lambda (el acc) (mu:cons el acc)) () '(1))	(1)
(core:foldl (:lambda (el acc) (mu:cons el acc)) () ())	:nil
(core:foldl (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))	6
(core:foldr (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(1 2 3))	:nil
(core:foldr (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(a b c))	:t
(core:foldr (:lambda (el acc) (mu:cons el acc)) () '(1 2 3 4))	(1 2 3 4)
(core:foldr (:lambda (el acc) (mu:cons el acc)) () '(1))	(1)
(core:foldr (:lambda (el acc) (mu:cons el acc)) () ())	:nil
(core:foldr (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))	6
(core:last '(1 2 . 3))	(2 . 3)
(core:last '(1 2 3))	(3)
(core:last '(1))	(1)
(core:last ())	:nil
(core:mapc (:lambda (el) el) '(1 2 3))	(1 2 3)
(core:mapc (:lambda (el) el) '(1 2 3))	(1 2 3)
(core:mapc (:lambda (el) el) '(1))	(1)
(core:mapc (:lambda (el) el) ())	:nil
(core:mapcar (:lambda (el) el) '(1 2 3))	(1 2 3)
(core:mapcar (:lambda (el) el) '(1))	(1)
(core:mapcar (:lambda (el) el) ())	:nil
(core:mapl (:lambda (el) el) '(1 2 3))	(1 2 3)
(core:mapl (:lambda (el) el) '(1))	(1)
(core:mapl (:lambda (el) el) ())	:nil
(core:maplist (:lambda (el) el) '(1 2 3))	((1 2 3) (2 3) (3))
(core:maplist (:lambda (el) el) '(1))	((1))
(core:maplist (:lambda (el) el) ())	:nil
(core:positionl (:lambda (el) (mu:eq el 'foo)) ())	:nil
(core:positionl (:lambda (el) (mu:eq el 'foo)) '(1))	:nil
(core:positionl (:lambda (el) (mu:eq el 'foo)) '(foo))	0
(core:positionl (:lambda (el) (mu:eq el 'foo)) '(1 foo))	1
(core:positionl core:zerop '(1 2 0 4 5))	2
(core:positionl core:zerop '(0 2 0 4 5))	0
(core:positionl core:zerop '(1 2 3 4 0))	4
(core:positionr (:lambda (el) (mu:eq el 'foo)) ())	:nil
(core:positionr (:lambda (el) (mu:eq el 'foo)) '(1))	:nil
(core:positionr (:lambda (el) (mu:eq el 'foo)) '(foo))	0
(core:positionr (:lambda (el) (mu:eq el 'foo)) '(1 foo))	1
(core:positionr core:zerop '(1 2 0 4 5))	2
(core:positionr core:zerop '(0 2 0 4 5))	2
(core:positionr core:zerop '(0 2 3 4 5))	0
(core:reverse '(1 2 3 4))	(4 3 2 1)
(mu:cdr (core:assoc #\a '((#\a . foo))))	foo
(mu:cdr (core:assoc #\a '(() (#\a . foo))))	foo
(mu:cdr (core:assoc #\a ()))	:nil
