#
# core list tests
#
assert_eq "(mu:type-of core:append)" ":func"
assert_eq "(mu:type-of core:assoc)" ":func"
assert_eq "(mu:type-of core:dropl)" ":func"
assert_eq "(mu:type-of core:dropr)" ":func"
assert_eq "(mu:type-of core:findl)" ":func"
assert_eq "(mu:type-of core:findr)" ":func"
assert_eq "(mu:type-of core:fix)" ":func"
assert_eq "(mu:type-of core:foldl)" ":func"
assert_eq "(mu:type-of core:foldr)" ":func"
assert_eq "(mu:type-of core:last)" ":func"
assert_eq "(mu:type-of core:length)" ":func"
assert_eq "(mu:type-of core:mapc)" ":func"
assert_eq "(mu:type-of core:mapcar)" ":func"
assert_eq "(mu:type-of core:mapl)" ":func"
assert_eq "(mu:type-of core:maplist)" ":func"
assert_eq "(mu:type-of core:positionl)" ":func"
assert_eq "(mu:type-of core:positionr)" ":func"
assert_eq "(mu:type-of core:reverse)" ":func"
assert_eq "(core:append '(() ()))" ":nil"
assert_eq "(core:append '(() (1 2 3)))" "(1 2 3)"
assert_eq "(core:append '((1 2 3) ()))" "(1 2 3)"
assert_eq "(core:append '((1 2 3) (4 5 6)))" "(1 2 3 4 5 6)"
assert_eq "(core:append '((1 2) 3))" "(1 2 . 3)"
assert_eq "(core:dropl '(1 2 3) 0)" "(1 2 3)"
assert_eq "(core:dropl '(1 2 3) 1)" "(2 3)"
assert_eq "(core:dropr '(1 2 3) 0)" "(1 2 3)"
assert_eq "(core:dropr '(1 2 3) 1)" "(1 2)"
assert_eq "(core:findl core:symbolp '(1 2 3))" ":nil"
assert_eq "(core:findl core:symbolp '(a b c))" "a"
assert_eq "(core:findr core:symbolp '(1 2 3))" ":nil"
assert_eq "(core:findr core:symbolp '(a b c))" "c"
assert_eq "(core:foldl (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(1 2 3))" ":nil"
assert_eq "(core:foldl (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(a b c))" ":t"
assert_eq "(core:foldl (:lambda (el acc) (mu:cons el acc)) () '(1 2 3 4))" "(4 3 2 1)"
assert_eq "(core:foldl (:lambda (el acc) (mu:cons el acc)) () '(1))" "(1)"
assert_eq "(core:foldl (:lambda (el acc) (mu:cons el acc)) () ())" ":nil"
assert_eq "(core:foldl (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))" "6"
assert_eq "(core:foldr (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(1 2 3))" ":nil"
assert_eq "(core:foldr (:lambda (el acc) (:if (core:null acc) :nil (core:symbolp el))) :t '(a b c))" ":t"
assert_eq "(core:foldr (:lambda (el acc) (mu:cons el acc)) () '(1 2 3 4))" "(1 2 3 4)"
assert_eq "(core:foldr (:lambda (el acc) (mu:cons el acc)) () '(1))" "(1)"
assert_eq "(core:foldr (:lambda (el acc) (mu:cons el acc)) () ())" ":nil"
assert_eq "(core:foldr (:lambda (x y) (mu:fx-add x y)) 0 '(1 2 3))" "6"
assert_eq "(core:last '(1 2 . 3))" "(2 . 3)"
assert_eq "(core:last '(1 2 3))" "(3)"
assert_eq "(core:last '(1))" "(1)"
assert_eq "(core:last ())" ":nil"
assert_eq "(core:mapc (:lambda (el) el) '(1 2 3))" "(1 2 3)"
assert_eq "(core:mapc (:lambda (el) el) '(1 2 3))" "(1 2 3)"
assert_eq "(core:mapc (:lambda (el) el) '(1))" "(1)"
assert_eq "(core:mapc (:lambda (el) el) ())" ":nil"
assert_eq "(core:mapcar (:lambda (el) el) '(1 2 3))" "(1 2 3)"
assert_eq "(core:mapcar (:lambda (el) el) '(1))" "(1)"
assert_eq "(core:mapcar (:lambda (el) el) ())" ":nil"
assert_eq "(core:mapl (:lambda (el) el) '(1 2 3))" "(1 2 3)"
assert_eq "(core:mapl (:lambda (el) el) '(1))" "(1)"
assert_eq "(core:mapl (:lambda (el) el) ())" ":nil"
assert_eq "(core:maplist (:lambda (el) el) '(1 2 3))" "((1 2 3) (2 3) (3))"
assert_eq "(core:maplist (:lambda (el) el) '(1))" "((1))"
assert_eq "(core:maplist (:lambda (el) el) ())" ":nil"
assert_eq "(core:positionl (:lambda (el) (mu:eq el 'foo)) ())" ":nil"
assert_eq "(core:positionl (:lambda (el) (mu:eq el 'foo)) '(1))" ":nil"
assert_eq "(core:positionl (:lambda (el) (mu:eq el 'foo)) '(foo))" "0"
assert_eq "(core:positionl (:lambda (el) (mu:eq el 'foo)) '(1 foo))" "1"
assert_eq "(core:positionl core:zerop '(1 2 0 4 5))" "2"
assert_eq "(core:positionl core:zerop '(0 2 0 4 5))" "0"
assert_eq "(core:positionl core:zerop '(1 2 3 4 0))" "4"
assert_eq "(core:positionr (:lambda (el) (mu:eq el 'foo)) ())" ":nil"
assert_eq "(core:positionr (:lambda (el) (mu:eq el 'foo)) '(1))" ":nil"
assert_eq "(core:positionr (:lambda (el) (mu:eq el 'foo)) '(foo))" "0"
assert_eq "(core:positionr (:lambda (el) (mu:eq el 'foo)) '(1 foo))" "1"
assert_eq "(core:positionr core:zerop '(1 2 0 4 5))" "2"
assert_eq "(core:positionr core:zerop '(0 2 0 4 5))" "2"
assert_eq "(core:positionr core:zerop '(0 2 3 4 5))" "0"
assert_eq "(core:reverse '(1 2 3 4))" "(4 3 2 1)"
assert_eq "(mu:cdr (core:assoc #\\a '((#\\a . foo))))" "foo"
assert_eq "(mu:cdr (core:assoc #\\a '(() (#\\a . foo))))" "foo"
assert_eq "(mu:cdr (core:assoc #\\a ()))" ":nil"
