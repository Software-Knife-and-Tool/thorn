(mu:funcall (core:compile '(lambda () 1)) ())	1
(mu:funcall (core:compile '(lambda (a b) (core:null b))) '(1 2))	:nil
(mu:funcall (core:compile '(lambda (a b) (mu:fx-add 1 2))) '(1 2))	3
(mu:funcall (core:compile '(lambda (a b) (mu:fx-add a b))) '(1 2))	3
(mu:funcall (core:compile '(lambda (a b) (mu:type-of b))) '(1 2))	:fixnum
(core:funcall (core:compile '(lambda ())) ())	:nil
(core:funcall (core:compile '(lambda () 1)) ())	1
(core:funcall (core:compile '(lambda (a) a)) '(1))	1
(core:funcall (core:compile '(lambda (a) 1)) '(2))	1
(core:funcall (core:compile '(lambda (a b) 1)) '(2 3))	1
(core:funcall (core:compile '(lambda (a b) (core:fixnump b))) '(1 2))	:t
(core:funcall (core:compile '(lambda (a b) (core:null b))) '(1 2))	:nil
(core:funcall (core:compile '(lambda (a b) (mu:fx-add 1 2))) '(1 2))	3
(core:funcall (core:compile '(lambda (a b) (mu:fx-add a b))) '(1 2))	3
(core:funcall (core:compile '(lambda (a b) (mu:type-of b))) '(1 2))	:fixnum
(core:funcall (core:compile '(lambda (&rest e) e)) '(1 2 3 4 5))	(1 2 3 4 5)
(core:funcall (core:compile '(lambda (a &rest e) e)) '(1 2 3 4 5))	(2 3 4 5)
(core:funcall (core:compile '(lambda (a b &rest e) e)) '(1 2 3 4 5))	(3 4 5)
(core:funcall (core:compile '(lambda (a b c &rest e) e)) '(1 2 3 4 5))	(4 5)
(core:funcall (core:compile '(lambda (a b c d &rest e) e)) '(1 2 3 4 5))	(5)
(core:funcall (core:compile '(lambda (a b c d e &rest f) f)) '(1 2 3 4 5))	:nil
(core:funcall (core:compile '(lambda (a b c d &rest f) (mu:write f () mu:std-out))) '(1 2 3 4 5))	(5)(5)
(mu:type-of (core:funcall (core:compile '(lambda (a) (a))) (mu:cons (:lambda () 1) ())))	:fixnum
