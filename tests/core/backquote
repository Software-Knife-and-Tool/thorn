(mu:eval (core:compile '(core:read (mu:open :string :input "`1") () ())))	1
(mu:eval (core:compile '(core:read (mu:open :string :input "`(1)") () ())))	(1)
(mu:eval (core:compile '(core:read (mu:open :string :input "`(#\\a)") () ())))	(#\a)
(mu:eval (core:compile '(core:read (mu:open :string :input "`\"abc\"") () ())))	"abc"
(mu:eval (core:compile '(core:read (mu:open :string :input "`(\"abc\")") () ())))	("abc")
(mu:eval (core:compile '(core:read (mu:open :string :input "`()") () ())))	:nil
(mu:eval (core:compile '(core:read (mu:open :string :input "`(())") () ())))	(:nil)
(mu:eval (core:compile '(core:read (mu:open :string :input "`,(mu:fx-add 1 2)") () ())))	3
(mu:eval (core:compile '(core:read (mu:open :string :input "(mu:type-of `,mu:version)") () ())))	:vector
(mu:eval (core:compile '(core:read (mu:open :string :input "`(,@(mu:fx-add 1 2))") () ())))	3
(mu:eval (core:compile '(core:read (mu:open :string :input "`#(:t 1 2 3)") () ())))	#(:t 1 2 3)
(mu:eval (core:compile '(core:read (mu:open :string :input "`(#(:t 1 2 3))") () ())))	(#(:t 1 2 3))
(mu:eval (core:compile '(core:read (mu:open :string :input "`(a b c)") () ())))	(a b c)
(mu:eval (core:compile '(core:read (mu:open :string :input "`((a b) c)") () ())))	((a b) c)
(mu:eval (core:compile '(core:read (mu:open :string :input "`(1.0 b (2))") () ())))	(1.0000 b (2))
(mu:eval (core:compile '(core:read (mu:open :string :input "`(,1 (2) 3)") () ())))	(1 (2) 3)
(mu:eval (core:compile '(core:read (mu:open :string :input "`(1 2 ,@3)") () ())))	(1 2 . 3)
(mu:eval (core:compile '(core:read (mu:open :string :input "`(,@(:quote (a b c)))")) () ()))	(a b c)
(mu:eval (core:compile '(core:read (mu:open :string :input "`(0 ,@(:quote (a b c)) 1)") () ())))	(0 a b c 1)
(mu:eval (core:compile '(core:read (mu:open :string :input "`(,(mu:fx-add 1 2))") () ())))	(3)
