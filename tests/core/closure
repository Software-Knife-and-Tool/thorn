#
# core closure tests
#
assert_eq "(mu:type-of core:apply)" ":func"
assert_eq "(mu:eval (core:compile '((lambda () (defun core:a-defun () 'a-defun) (core:a-defun)))))" "a-defun"
assert_eq "(mu:eval (core:compile '((lambda () (defun core:a-defun (a) a) (core:a-defun 'a-defun)))))" "a-defun"
assert_eq "(mu:eval (core:compile '((lambda () (defun core:a-defun (a b) (mu:cons a b)) (core:a-defun 'a-defun 'b-defun)))))" "(a-defun . b-defun)"
assert_eq "(mu:eval (core:compile '((lambda () (defun core:a-defun (&rest a) a) (core:a-defun 1 2 3)))))" "(1 2 3)"
assert_eq "(mu:eval (core:compile '((lambda () (defun core:a-defun (a &rest b) (mu:cons a b)) (core:a-defun 0 1 2 3)))))" "(0 1 2 3)"
assert_eq "(mu:eval (core:compile '((lambda () (defun core:a-defun (a b &rest c) (mu:cons a (mu:cons b c))) (core:a-defun 0 1 2 3)))))" "(0 1 2 3)"
assert_eq "(core:apply (core:apply (core:compile '(lambda (a) (lambda (b) (mu:fx-add a b)))) '(5)) '(10))" "15"
