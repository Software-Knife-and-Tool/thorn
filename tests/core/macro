(core:macro-function core:macro-function ())	:nil
(mu:type-of core:macroexpand-1)	:func
(mu:type-of core:macroexpand)	:func
(mu:type-of core:macro-function)	:func
(core:compile '(define-macro core:a-macro ()))	(:quote core:a-macro)
(mu:type-of ((:lambda () (core:compile '(define-macro a-macro () a-macro)) (core:macro-function 'a-macro ()))))	:func
((:lambda () (core:compile '(define-macro no-arg-macro () ''no-arg-macro)) (core:macroexpand '(no-arg-macro) ())))	'no-arg-macro
((:lambda () (core:compile '(define-macro no-arg-macro () ''no-arg-macro)) (mu:eval (core:compile '(no-arg-macro)))))	no-arg-macro
((:lambda () (core:compile '(define-macro arg-macro (arg) arg)) (core:macroexpand '(arg-macro (mu:fx-add 1 2)) ())))	(mu:fx-add 1 2)
((:lambda () (core:compile '(define-macro arg-macro (arg) arg)) (mu:eval (core:compile '(arg-macro (mu:fx-add 1 2))))))	3
((:lambda () (core:compile '(define-macro rest-macro (&rest args) (mu:cons '(lambda (&rest rest) rest) args))) (mu:eval (core:compile '(rest-macro (mu:fx-add 1 2))))))	(3)
((:lambda () (core:compile '(define-macro rest-macro (&rest args) (mu:cons '(lambda (&rest rest) rest) args))) (core:macroexpand (core:compile '(rest-macro (mu:fx-add 1 2))) ())))	((lambda (&rest rest) rest) (mu:fx-add 1 2))
((:lambda () (core:compile '(define-macro rest-macro (&rest args) (mu:cons (lambda (&rest rest) rest) args))) (mu:eval (core:compile '(rest-macro 1 2 3)))))	((lambda (&rest rest) rest) 1 2 3)
