#
# general core compiler tests
#
assert_eq "(mu:eq :func (mu:type-of core:compile))" ":t"
# special forms if, defconst, lambda
assert_eq "(mu:eq :func (mu:type-of (core:compile '(lambda () 1))))" ":t"
assert_eq "(mu:eq :func (mu:type-of (core:compile '(lambda (a b) b))))" ":t"
assert_eq "(mu:eq :func (mu:type-of (core:compile '(lambda (a) "hoo"))))" ":t"
assert_eq "(mu:eq :func (mu:type-of (core:compile '(lambda (a) a))))" ":t"
assert_eq "(core:compile '(defconst foo ()))" "(:quote core:foo)"
assert_eq "(mu:apply (core:compile '(lambda () (defconst core:foo 'foo) core:foo)) ())" "foo"
assert_eq "(mu:eval (core:compile '(if :t :t ())))" ":t"
assert_eq "(mu:eval (core:compile '(if () () :t)))" ":t"
assert_eq "(mu:eval (core:compile '(if :t () :t)))" ":nil"
assert_eq "(mu:eval (core:compile '(if () :t ())))" ":nil"
assert_eq "(mu:eval (core:compile '(if :t :t ())))" ":t"
assert_eq "(mu:eval (core:compile '(if :t :t :t)))" ":t"
assert_eq "(mu:eval (core:compile '(if () ())))" ":nil"
assert_eq "(mu:eval (core:compile '(if () :t)))" ":nil"
assert_eq "(mu:eval (core:compile '(if :t ())))" ":nil"
assert_eq "(mu:eval (core:compile '(if :t :t)))" ":t"
assert_eq "(mu:eval (core:compile '(if () (mu:fx-add 0 1) (mu:fx-add 0 0))))" "0"
assert_eq "(mu:eval (core:compile '(if :t (mu:fx-add 0 1) (mu:fx-add 0 0))))" "1"
assert_eq "(mu:eval (core:compile '(if (core:null ()) (mu:fx-add 0 1) (mu:fx-add 0 0))))" "1"
assert_eq "(mu:eval (core:compile '(if (core:not (core:null :t)) (mu:fx-add 0 1) (mu:fx-add 0 0))))" "1"
assert_eq "(mu:eval (core:compile '(if (core:null ()) (mu:fx-add 0 1) (core:write \"should not eval\" () ()))))" "1"
assert_eq "(mu:eval (core:compile '(if (core:null :t) (core:write \"should not eval\" () ()) (mu:fx-add 0 0))))" "0"
assert_eq "(mu:eval (core:compile '((:lambda (fn) (core:apply (:lambda (fn) (mu:eq :func (mu:type-of fn))) (core::list fn))) mu:eq)))" ":t"
