(mu:eq :func (mu:type-of core:compile))	:t
(mu:eq :func (mu:type-of (core:compile '(lambda () 1))))	:t
(mu:eq :func (mu:type-of (core:compile '(lambda (a b) b))))	:t
(mu:eq :func (mu:type-of (core:compile '(lambda (a) "hoo"))))	:t
(mu:eq :func (mu:type-of (core:compile '(lambda (a) a))))	:t
(core:compile '(defconst foo ()))	(:quote core:foo)
(mu:apply (core:compile '(lambda () (defconst core:foo 'foo) core:foo)) ())	foo
(mu:eval (core:compile '(if :t :t ())))	:t
(mu:eval (core:compile '(if () () :t)))	:t
(mu:eval (core:compile '(if :t () :t)))	:nil
(mu:eval (core:compile '(if () :t ())))	:nil
(mu:eval (core:compile '(if :t :t ())))	:t
(mu:eval (core:compile '(if :t :t :t)))	:t
(mu:eval (core:compile '(if () ())))	:nil
(mu:eval (core:compile '(if () :t)))	:nil
(mu:eval (core:compile '(if :t ())))	:nil
(mu:eval (core:compile '(if :t :t)))	:t
(mu:eval (core:compile '(if () (mu:fx-add 0 1) (mu:fx-add 0 0))))	0
(mu:eval (core:compile '(if :t (mu:fx-add 0 1) (mu:fx-add 0 0))))	1
(mu:eval (core:compile '(if (core:null ()) (mu:fx-add 0 1) (mu:fx-add 0 0))))	1
(mu:eval (core:compile '(if (core:not (core:null :t)) (mu:fx-add 0 1) (mu:fx-add 0 0))))	1
(mu:eval (core:compile '(if (core:null ()) (mu:fx-add 0 1) (core:write "should not eval" () ()))))	1
(mu:eval (core:compile '(if (core:null :t) (core:write "should not eval" () ()) (mu:fx-add 0 0))))	0
(mu:eval (core:compile '((:lambda (fn) (core:apply (:lambda (fn) (mu:eq :func (mu:type-of fn))) `(,fn))) mu:eq)))	:t
