(mu:type-of prelude:make-vector)	:func
(mu:type-of prelude:slice)	:func
(mu:type-of prelude:vector-length)	:func
(mu:type-of prelude:vector-ref)	:func
(mu:type-of prelude:vectorp)	:func
(mu:type-of prelude:bit-vector-p)	:func
(mu:type-of prelude:vector-displaced-p)	:func
(prelude:make-vector '(1 2 3))	#(:byte 1 2 3)
(prelude:make-vector '(1024 2 3))	#(:fixnum 1024 2 3)
(prelude:make-vector '(#\a #\b #\c))	"abc"
(prelude:make-vector '(1.0 1.0 1.0))	#(:float 1.0000 1.0000 1.0000)
(prelude:make-vector '(1.0 #\a ()))	#(:t 1.0000 a :nil)
(prelude:%prelude-type-p (prelude:make-vector '(1 2 3)))	:nil
(prelude:vector-type #(:t 1 2 3))	:t
(prelude:vector-type (prelude:read (prelude:make-string-stream :input "#*11101") () ()))	bit
(prelude:vector-type (prelude:slice #(:fixnum 1 2 3) 1 2))	:fixnum
(prelude:slice #(:fixnum 1 2 3) 1 2)	#s(:<type> vector ((:base . #(:fixnum 1 2 3)) (:disp 1 . 2) (:bitvec)))
(prelude:vector-ref (prelude:make-vector '(1 2 3)) 1)	2
(prelude:vectorp (prelude:make-vector '(1 2 3)))	:t
(prelude:vectorp (mu:make-sv :t '(1 2 3)))	:t
(prelude:vector-ref (prelude:slice #(:fixnum 1 2 3) 1 2) 0)	2
(prelude:vectorp (prelude:read (prelude:make-string-stream :input "#*1111") () ()))	:t
(prelude:vector-length (prelude:read (prelude:make-string-stream :input "#*1111") () ()))	4
(prelude:vector-ref (prelude:read (prelude:make-string-stream :input "#*1111") () ()) 0)	1
(prelude:vector-ref (prelude:read (prelude:make-string-stream :input "#*1000") () ()) 1)	0
