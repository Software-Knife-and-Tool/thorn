;;;  SPDX-FileCopyrightText: Copyright 2023 James M. Putnam (putnamjm.design@gmail.com)
;;;  SPDX-License-Identifier: MIT

;;;
;;; time function
;;;
(mu:intern :prelude "time"
   (:lambda (fn args)
      (:if (prelude:functionp fn)
           (:if (prelude:listp args)
                ()
                (prelude:raise args 'prelude:time "is not a list"))
           (prelude:raise fn 'prelude:time "is not a function"))
     ((:lambda (start-vec time-value stop-vec)
         ((:lambda (time-delta value type-diffs)
             (prelude:format :t "Evaluation consumed ~A usec runtime~%" (prelude:%list-2 time-delta))
             (prelude:format :t "           consed ~A~%" `(,type-diffs))
             value)
            (mu:car time-value)
            (mu:cdr time-value)
            (mu:fix
             (:lambda (loop)
                (:if (mu:eq :vector (mu:type-of loop))
                     loop
                     ((:lambda (list n)
                        ((:lambda (offset)
                            (:if (mu:fx-lt offset (mu:sv-len start-vec))
                                 ((:lambda (type total alloc free)
                                     (:if (prelude:zerop alloc)
                                           `(,list ,@(mu:fx-add 1 n))
                                           ((:lambda (type-stats)
                                               (mu:cons `(,@list ,@type-stats) (mu:fx-add 1 n)))
                                            `(,type ,total ,alloc ,free))))
                                     (mu:sv-ref start-vec offset)
                                     (mu:fx-sub (mu:sv-ref stop-vec (mu:fx-add offset 1)) (mu:sv-ref start-vec (mu:fx-add offset 1)))
                                     (mu:fx-sub (mu:sv-ref stop-vec (mu:fx-add offset 2)) (mu:sv-ref start-vec (mu:fx-add offset 2)))
                                     (mu:fx-sub (mu:sv-ref stop-vec (mu:fx-add offset 3)) (mu:sv-ref start-vec (mu:fx-add offset 3))))
                                  (mu:vector :t list)))
                          (mu:fx-mul n 4)))
                      (mu:car loop)
                      (mu:cdr loop))))
             (mu:cons () 1))))
        (mu:hp-stat)
        ((:lambda (start)
           ((:lambda (value)
              (mu:cons (mu:fx-sub (mu:run-us) start) value))
            (prelude:apply fn args)))
        (mu:run-us))
       (mu:hp-stat))))
