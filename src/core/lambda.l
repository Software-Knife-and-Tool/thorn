;;;  SPDX-FileCopyrightText: Copyright 2017-2022 James M. Putnam (putnamjm.design@gmail.com)
;;;  SPDX-License-Identifier: MIT

;;;
;;; core lambda form
;;;
;;; [*core lambda form*]
;;; (lambda ([symbol ...] [&rest rest-symbol]) . body)
;;;

;;;
;;; [*lambda descriptor*] #s(:ctype :lambda (bound reqs rest lexenv))
;;;
;;; bound:  bound symbols
;;; reqs:   required symbols
;;; rest:   rest symbol or nil
;;; lexenv: lexical environment, list of lambdas
;;;
(mu:intern core :intern "make-lambda"
   (:lambda (lambda-list rest-sym env)
      (core::make-ctype "lambda"
        (core::pair-list
         `(:bound  ,lambda-list
           :rest   ,rest-sym
           :lexenv ,env)))))

(mu:intern core :intern "lambda-prop"
   (:lambda (prop lambda)
      (:if (core:findl (:lambda (lambda-prop) (mu:eq prop lambda-prop)) '(:bound :reqs :rest :lexenv))
           ((:lambda (ref)
               (core:raise-when core:null prop 'lambda-prop "property not bound")
               (mu:cdr ref))
            (core::ctype-ref prop lambda))
           (core:raise prop 'lambda-prop "not a lambda property"))))

;;;
;;; `core::core-lambda` compiles a core lambda form to a lambda descriptor
;;;
;;; `lambda:` lambda form
;;; `env:`    lexical environment
;;;
;;; `returns:` lambda descriptor
;;;
(mu:intern core :intern "core-lambda"
   (:lambda (lambda env)
      (:if (core:findl (:lambda (el) (core:null (mu:eq :symbol (mu:type-of el)))) lambda)
         (core:raise lambda 'core::core-lambda "list syntax")
         ((:lambda (desc)
            (:if (core:fixnump desc)
                 (core::make-lambda lambda () env)
                 desc))
          (core:foldl
            (:lambda (el acc)
               (:if (core:lambdap acc)
                  acc
                  (:if (mu:eq '&rest el)
                     (:if (mu:eq (mu:length lambda) (mu:fx-add 2 acc))
                          (core::make-lambda
                           `(,@(core:dropr lambda 2) ,@(core:dropl lambda (core:1- (mu:length lambda))))
                           (mu:nth (core:1- (mu:length lambda)) lambda)
                           env)
                          (core:raise lambda 'core::core-lambda "rest botch"))
                     (core:1+ acc))))
            0
            lambda)))))

;;;
;;; `core::compile-lambda-body` resolves body symbols with `core::compile-symbol`,
;;; uses the core compiler for everything else, and returns a compiled body.
;;;
;;; if a body returns a function generated by a lambda expression, a closure body is generated.
;;;
;;; `lambda-desc:` lambda descriptor
;;; `body:` list of body forms
;;; `env:` runtime lexical env
;;;
;;; `returns:` compiled body
;;;
(mu:intern core :intern "compile-lambda-body"
  (:lambda (lambda-desc body env)
    (:if body
         ((:lambda (env)
             (core::compile-closure lambda-desc body env))
          (core::compile-add-env lambda-desc env))
         ())))

;;;
;;; Compiling symbols
;;;
;;; `core::compile-symbol` looks up unqualified symbols in the current lexical environment. If found,
;;; it compiles a *frame-reference* from the *lexical-descriptor* returned by `core::symbol-frame`.
;;;
;;; [*lexical-descriptor*] `(lex-ref frame-id offset)`
;;;
;;; We have two sources of lexical bindings: from the *core* lambda being compiled and the
;;; current lexical environment.
;;;
;;; `symbol:` symbol to be compiled
;;; `env:` compiled environment
;;; `returns:` qualified symbol or *frame-ref*
;;;
;;; need to differentiate between uninterned symbols and closed symbols
;;;
(mu:intern core :intern "compile-symbol"
   (:lambda (symbol env)
      (:if (core:null symbol)
           symbol
           (:if (core:uninternedp symbol)
                symbol
                symbol))))

;;;
;;; resolving body symbols
;;;
;;; *symbol-frame-ref* looks up *symbol* in the lexical environment.
;;;
;;; if found return a compiled frame reference, otherwise *nil*.
;;;
;;; `symbol:` symbol to be compiled
;;; `env:` lexical compiled environment
;;;
;;; `returns:` *frame-ref* or *nil*
;;;
(mu:intern core :intern "symbol-frame-ref"
  (:lambda (symbol env)
    (core:foldl
     (:lambda (frame acc)
       (:if acc
            acc
            ((:lambda (offset)
               (:if offset
                    ((:lambda ()
                       (mu:compile `(mu::fr-ref ,(mu:cdr (core::ctype-ref :func frame)) ,offset))))
                    ()))
             (core:positionl (:lambda (el) (mu:eq el symbol)) (mu:cdr (core::ctype-ref :bound frame))))))
     ()
     env)))
