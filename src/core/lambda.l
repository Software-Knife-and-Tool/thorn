;;;  SPDX-FileCopyrightText: Copyright 2023 James M. Putnam (putnamjm.design@gmail.com)
;;;  SPDX-License-Identifier: MIT

;;;
;;; core lambda form
;;;
;;; [*core lambda form*]
;;; (lambda ([symbol ...] [&rest rest-symbol]) . body)
;;;

;;;
;;; [*lambda descriptor*] #s(:<ctype> :lambda (bound rest lexenv))
;;;
;;; bound:  bound symbols
;;; rest:   rest symbol or nil
;;; lexenv: lexical environment, list of lambdas
;;;
(mu:intern :core "%lambdap"
   (:lambda (fn)
      (mu:eq (core:type-of fn) 'lambda)))

(mu:intern :core "%make-lambda"
   (:lambda (lambda-list rest-sym env)
      (core:%make-core-type "lambda"
        (core:%pair-list
         `(:bound  ,lambda-list
           :rest   ,rest-sym
           :lexenv ,env)))))

(mu:intern :core "%lambda-prop"
   (:lambda (prop lambda)
      (:if (core:findl (:lambda (lambda-prop) (mu:eq prop lambda-prop)) '(:bound :rest :lexenv))
           ((:lambda (ref)
               ;;; (core:raise-when core:null prop 'lambda-prop "property not bound")
               (mu:cdr ref))
            (core:%core-type-ref prop lambda))
           (core:raise prop 'lambda-prop "not a lambda property"))))

;;;
;;; `%compile-lambda` compiles a core lambda form to a lambda descriptor
;;;
;;; `lambda:` lambda form, with leading symbol
;;; `env:`    lexical environment
;;;
;;; `returns:` lambda descriptor
;;;
(mu:intern :core "%compile-core-lambda"
   (:lambda (lambda env)
      (:if (core:findl (:lambda (el) (core:null (mu:eq :symbol (mu:type-of el)))) lambda)
           (core:raise lambda 'core:%compile-lambda "list syntax")
           ((:lambda (desc)
               (:if (core:fixnump desc)
                    (core:%make-lambda lambda () env)
                    desc))
            (core:%foldl
             (:lambda (el acc)
                (:if (core:%lambdap acc)
                     acc
                     (:if (mu:eq '&rest el)
                          (:if (mu:eq (mu:length lambda) (mu:fx-add 2 acc))
                               (core:%make-lambda
                                `(,@(core:dropr lambda 2) ,@(core:dropl lambda (mu:fx-sub (mu:length lambda) 1)))
                                (mu:nth (mu:fx-sub (mu:length lambda) 1) lambda)
                                env)
                               (core:raise lambda 'core:%compile-lambda "rest botch"))
                          (mu:fx-add 1 acc))))
             0
             lambda)))))

;;;
;;; `%compile-lambda-body` resolves body symbols with `core::compile-symbol`,
;;; uses the core compiler for everything else, and returns a compiled body.
;;;
;;; if a body returns a lambda expression, a closure body is
;;; generated.
;;;
;;; `lambda-desc:` lambda descriptor
;;; `body:` list of body forms
;;; `env:` runtime lexical env
;;;
;;; `returns:` compiled body/closure
;;;
(mu:intern :core "%compile-lambda-body"
   (:lambda (lambda-desc body env)
      (:if (core:null body)
           ()
           ((:lambda (env)
               (core:maplist
                (:lambda (body-cdr)
                   (:if (mu:cdr body-cdr)
                        ((:lambda (value)
                            (core:%compile value env))
                            (mu:car body-cdr))
                        ((:lambda (form)
                            (:if (core:consp form)
                                 (:if (mu:eq 'lambda (mu:car form))
                                      (core:%compile-function form env)
                                      (core:%compile form env))
                                 (core:%compile form env)))
                         (mu:car body-cdr))))
                body))
          (mu:cons lambda-desc env)))))

#|
;;;
;;; resolving body symbols
;;;
;;; *%frame-ref* looks up *symbol* in the lexical environment.
;;;
;;; if found return a compiled frame reference, otherwise *nil*.
;;;
;;; `symbol:` symbol to be compiled
;;; `env:` lexical compiled environment
;;;
;;; `returns:` *frame-ref* or *nil*
;;;
(mu:intern :core "%frame-ref"
  (:lambda (symbol env)
    (core:%foldl
     (:lambda (frame acc)
       (:if acc
            acc
            ((:lambda (offset)
               (:if offset
                    (mu:compile
                     `(mu:fr-ref
                       ,(mu:cdr (core:%core-type-ref :func frame))
                       ,offset))
                    ()))
            (core:positionl
             (:lambda (el) (mu:eq el symbol))
             (mu:cdr (core:%core-type-ref :bound frame))))))
     ()
     env)))
|#
