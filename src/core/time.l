;;;  SPDX-FileCopyrightText: Copyright 2023 James M. Putnam (putnamjm.design@gmail.com)
;;;  SPDX-License-Identifier: MIT

;;;
;;; time function
;;;
(mu:intern :core "time"
   (:lambda (fn args)
      (:if (core:functionp fn)
           (:if (core:listp args)
                ()
                (core:raise args 'core:time "is not a list"))
           (core:raise fn 'core:time "is not a function"))
      ((:lambda (start-vec time stop-vec)
          ((:lambda (time-delta value type-diffs)
               (core:format :t "Evaluation of (~S ~S) consumed ~A usec runtime~%" `(,fn ,args ,time-delta))
               (core:format :t "                      consed ~A~%" `(,type-diffs))
               value)
           (mu:car time)
           (mu:cdr time)
           (mu:fix
            (:lambda (loop)
               (:if (mu:eq :vector (mu:type-of loop))
                    loop
                    ((:lambda (list n)
                        ((:lambda (offset)
                            (:if (mu:fx-lt offset (mu:sv-len start-vec))
                                 ((:lambda (type total alloc free)
                                    (:if (core:zerop alloc)
                                         `(() ,@(mu:fx-add 1 n))
                                         ((:lambda (type-stats)
                                            (mu:cons `(,@list ,@type-stats) (mu:fx-add 1 n)))
                                          `(,type ,total ,alloc ,free))))
                                  (mu:sv-ref start-vec (mu:fx-add offset 0))
                                  (mu:fx-sub (mu:sv-ref stop-vec (mu:fx-add offset 1)) (mu:sv-ref start-vec (mu:fx-add offset 1)))
                                  (mu:fx-sub (mu:sv-ref stop-vec (mu:fx-add offset 2)) (mu:sv-ref start-vec (mu:fx-add offset 2)))
                                  (mu:fx-sub (mu:sv-ref stop-vec (mu:fx-add offset 3)) (mu:sv-ref start-vec (mu:fx-add offset 3))))
                                 (mu:make-sv :t list)))
                         (mu:fx-mul n 4)))
                     (mu:car loop)
                     (mu:cdr loop))))
            (mu:cons () 1))))
       (mu:hp-stat)
       ((:lambda (start)
           ((:lambda (value)
              (mu:cons (mu:fx-sub (mu:run-us) start) value))
            (core:apply fn args)))
        (mu:run-us))
       (mu:hp-stat))))
