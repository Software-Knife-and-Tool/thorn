;;;  SPDX-FileCopyrightText: Copyright 2023 James M. Putnam (putnamjm.design@gmail.com)
;;;  SPDX-License-Identifier: MIT

;;;
;;; macro definition, compilation, and expansion
;;;

;;;
;;; Macro definitions are compiled like lambdas (though eventually with a slighlty
;;; different lambda list including &whole).
;;;
;;; Macro calls are expanded at compile time.
;;;
;;; Common Lisp adds an environment argument here for lexical macro expanders.
;;;

;;;
;;; macro environment
;;;
(mu:intern :core "%map-macro-symbol-ns"
   (:lambda (symbol)
      ((:lambda (ns-name)
          (mu:ns-find core:%macro-ns% ns-name))
       (mu:sy-name (mu:sy-ns symbol)))))

(mu:intern :core "%make-macro-ns"
   (:lambda (ns)
      ((:lambda (macro-ns)
          (mu:intern core:%macro-ns% (mu:sy-name ns) macro-ns)
          macro-ns)
       (core:%gen-anon-ns))))

(mu:intern :core "%macro-env"
   (:lambda (symbol macro-fn)
      ((:lambda (macro-ns symbol-ns)
          (:if macro-ns
               (mu:intern macro-ns symbol-ns macro-fn)
               (mu:intern (core:%make-macro-ns symbol-ns) (mu:sy-name symbol) macro-fn))
          symbol)
       (core:%map-macro-symbol-ns symbol)
       (mu:sy-ns symbol))))

(mu:intern :core "%find-macro"
   (:lambda (symbol env)
      ((:lambda (macro-ns symbol-ns symbol-name)
          (:if macro-ns
               (mu:ns-find (mu:sy-val macro-ns) symbol-name)
               ()))
       (mu:ns-find
        core:%macro-ns%
        (mu:sy-name (mu:sy-ns symbol)))
       (mu:sy-name (mu:sy-ns symbol))
       (mu:sy-name symbol))))

(mu:intern :core "%compile-macro-call"
   (:lambda (macro-symbol arg-list env)
       ((:lambda (macro-function)
          ; (core:warn macro-function "compile-macro-call")
          ; (core:warn (core:%quoted-lambda-arg-list macro-function arg-list) "macro-call args")
          ((:lambda (expanded-form)
             (core:%compile expanded-form env))
           (:if (core:core-function-p macro-function)
                (core:%funct-apply-quoted
                 macro-function
                 (core:%compile-lambda-arg-list macro-function arg-list env))
                (mu:apply macro-function arg-list))))
      (core:macro-function macro-symbol env))))

;;;
;;; macroexpand-1 expands a macro call once.
;;;
(mu:intern :core "macroexpand-1"
   (:lambda (form env)
     (:if (core:consp form)
          ((:lambda (fn-symbol arg-list)
             (:if (mu:eq :symbol (mu:type-of fn-symbol))
                  ((:lambda (macro-function)
                     (:if macro-function
                          (:if (core:core-function-p macro-function)
                               (core:%funct-apply-quoted macro-function (core:%quoted-lambda-arg-list macro-function arg-list))
                               (mu:apply macro-function arg-list))
                          form))
                   (core:macro-function fn-symbol env))
                  form))
           (mu:car form)
           (mu:cdr form))
          form)))

;;;
;;; macroexpand: expand a form until it is no longer a macro call
;;;
(mu:intern :core "macroexpand"
   (:lambda (form env)
     ((:lambda (expanded)
          (:if (mu:eq form expanded)
             expanded
             (core:macroexpand expanded env)))
       (core:macroexpand-1 form env))))

;;;
;;; macro-function: map a symbol to a macro function
;;;
;;; acts as a predicate
;;;
(mu:intern :core "macro-function"
   (:lambda (symbol env)
      (:if (mu:eq :symbol (mu:type-of symbol))
           ((:lambda (macro)
               (:if macro
                    (mu:sy-val macro)
                    ()))
            (core:%find-macro symbol env))
          ())))
